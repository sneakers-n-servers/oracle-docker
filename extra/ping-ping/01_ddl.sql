DROP TABLE round_set;
DROP TABLE round;
DROP TABLE registration;
DROP TABLE tournament_venue;
DROP TABLE tournament;
DROP TABLE venue;
DROP TABLE player;

CREATE TABLE player(
  email        VARCHAR2(100),
  first_name   VARCHAR2(100) NOT NULL,
  last_name    VARCHAR2(100) NOT NULL,
  phone        VARCHAR2(14),
  elo          INTEGER,
  CONSTRAINT pk_player PRIMARY KEY(email),
  CONSTRAINT check_player_phone_number CHECK(REGEXP_LIKE(phone, '^\([[:digit:]]{3}\) [[:alnum:]]{3}-[[:alnum:]]{4}$')),
  CONSTRAINT check_player_email CHECK(email LIKE '%@%.%' AND email NOT LIKE '@%' AND email NOT LIKE '%@%@%'),
  CONSTRAINT check_player_positive_elo CHECK(elo > 0)
);

CREATE TABLE venue(
  name     VARCHAR(300),
  state    VARCHAR2(2) NOT NULL,
  city     VARCHAR2(300) NOT NULL,
  street   VARCHAR2(1000) NOT NULL, 
  zipcode  VARCHAR2(10) NOT NULL,
  max_capacity INTEGER,
  CONSTRAINT pk_venue PRIMARY KEY(name),
  CONSTRAINT distinct_address UNIQUE(state, city, street, zipcode)
);

CREATE TABLE tournament(
  name       VARCHAR(500),
  start_time TIMESTAMP(0) NOT NULL,
  stop_time  TIMESTAMP(0) NOT NULL,
  capacity   INTEGER,
  num_sets INTEGER NOT NULL, 
  CONSTRAINT pk_tournament PRIMARY KEY(name),
  CONSTRAINT valid_tournament_start CHECK(start_time < stop_time)
);

CREATE TABLE tournament_venue(
  tournament_name VARCHAR(500),
  venue_name VARCHAR(300),
  start_time TIMESTAMP(0),
  stop_time  TIMESTAMP(0),
  CONSTRAINT fk_tournament_name FOREIGN KEY(tournament_name) REFERENCES tournament(name),
  CONSTRAINT fk_tournament_venue FOREIGN KEY(venue_name) REFERENCES venue(name),
  CONSTRAINT valid_venue_start CHECK(start_time < stop_time)
); 

CREATE TABLE registration(
  id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1),
  player_id VARCHAR(100),
  tournament_id VARCHAR(500),
  rank  INTEGER,
  finish INTEGER,
  CONSTRAINT pk_registration PRIMARY KEY(id),
  CONSTRAINT fk_player_reg FOREIGN KEY(player_id) REFERENCES player(email),
  CONSTRAINT fk_tournament_reg FOREIGN KEY(tournament_id) REFERENCES tournament(name),
  CONSTRAINT check_positive_rank CHECK(rank > 0),
  CONSTRAINT check_poisitive_finish CHECK(finish > 0) 
);

CREATE TABLE round(
  round_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1),
  player1 INTEGER NOT NULL,
  player2 INTEGER NOT NULL,
  venue  VARCHAR(300) NOT NULL,
  round_number  INTEGER NOT NULL,
  winner INTEGER,
  CONSTRAINT pk_round PRIMARY KEY(round_id), 
  CONSTRAINT fk_round_player1 FOREIGN KEY(player1) REFERENCES registration(id),
  CONSTRAINT fk_round_player2 FOREIGN KEY(player2) REFERENCES registration(id),
  CONSTRAINT fk_round_venue FOREIGN KEY(venue) REFERENCES venue(name),
  CONSTRAINT fk_winner FOREIGN KEY(winner) REFERENCES registration(id),
  CONSTRAINT unique_rounds UNIQUE(player1, player2, round_number),
  CONSTRAINT positive_round CHECK(round_number > 0)
);

CREATE TABLE round_set(
  round_id INTEGER,
  set_number INTEGER NOT NULL,
  player1_score INTEGER,
  player2_score INTEGER,
  CONSTRAINT fk_round FOREIGN KEY(round_id) REFERENCES round(round_id),
  CONSTRAINT pk_score PRIMARY KEY(round_id, set_number),
  CONSTRAINT positive_set CHECK(set_number > 0)
);
